{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TailorService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8085/tailors'; // Replace with your backend URL\n  }\n  // Register a new tailor\n  registerTailor(tailor) {\n    return this.http.post(`${this.baseUrl}/register`, tailor);\n  }\n  // Fetch tailor details by ID\n  getTailorById(tailorId) {\n    return this.http.get(`${this.baseUrl}/${tailorId}`);\n  }\n  // Update tailor details\n  updateTailor(tailor) {\n    return this.http.put(`${this.baseUrl}/put/${tailor.tailorId}`, tailor);\n  }\n  //get all shops\n  getAllShops() {\n    return this.http.get(`${this.baseUrl}`);\n  }\n  getTailorsByDressName(dressName) {\n    const params = new HttpParams().set('dressName', dressName);\n    return this.http.get(`${this.baseUrl}/by-dress-name`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function TailorService_Factory(t) {\n      return new (t || TailorService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TailorService,\n      factory: TailorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAQ7D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,+BAA+B,CAAC,CAAC;EAEZ;EAEvC;EACAC,cAAc,CAACC,MAAc;IAC3B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAS,GAAG,IAAI,CAACC,OAAO,WAAW,EAAEF,MAAM,CAAC;EACnE;EAEF;EACEG,aAAa,CAACC,QAAgB;IAC5B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAS,GAAG,IAAI,CAACH,OAAO,IAAIE,QAAQ,EAAE,CAAC;EAC7D;EACF;EACEE,YAAY,CAACN,MAAc;IACzB,OAAO,IAAI,CAACF,IAAI,CAACS,GAAG,CAAS,GAAG,IAAI,CAACL,OAAO,QAAQF,MAAM,CAACI,QAAQ,EAAE,EAAEJ,MAAM,CAAC;EAChF;EAEA;EACAQ,WAAW;IACP,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACH,OAAO,EAAE,CAAC;EACnD;EAEFO,qBAAqB,CAACC,SAAiB;IACnC,MAAMC,MAAM,GAAG,IAAIhB,UAAU,EAAE,CAACiB,GAAG,CAAC,WAAW,EAAEF,SAAS,CAAC;IAC3D,OAAO,IAAI,CAACZ,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACH,OAAO,gBAAgB,EAAE;MAAES;IAAM,CAAE,CAAC;EAE7E;;;uBA5BSf,aAAa;IAAA;EAAA;;;aAAbA,aAAa;MAAAiB,SAAbjB,aAAa;MAAAkB,YAFZ;IAAM;EAAA","names":["HttpParams","TailorService","constructor","http","registerTailor","tailor","post","baseUrl","getTailorById","tailorId","get","updateTailor","put","getAllShops","getTailorsByDressName","dressName","params","set","factory","providedIn"],"sourceRoot":"","sources":["F:\\CAPSTONE\\CAPSTONE-TEMP\\tailor-management\\src\\app\\services\\tailor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Tailor } from '../models/tailor.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TailorService {\r\n  private baseUrl = 'http://localhost:8085/tailors'; // Replace with your backend URL\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Register a new tailor\r\n  registerTailor(tailor: Tailor): Observable<Tailor> {\r\n    return this.http.post<Tailor>(`${this.baseUrl}/register`, tailor);\r\n  }\r\n\r\n// Fetch tailor details by ID\r\n  getTailorById(tailorId: number): Observable<Tailor> {\r\n    return this.http.get<Tailor>(`${this.baseUrl}/${tailorId}`);\r\n  }\r\n// Update tailor details\r\n  updateTailor(tailor: Tailor): Observable<Tailor> {\r\n    return this.http.put<Tailor>(`${this.baseUrl}/put/${tailor.tailorId}`, tailor);\r\n  }\r\n\r\n  //get all shops\r\n  getAllShops(): Observable<Tailor[]> {\r\n      return this.http.get<Tailor[]>(`${this.baseUrl}`);\r\n    }\r\n\r\n  getTailorsByDressName(dressName: string): Observable<Tailor[]> {\r\n      const params = new HttpParams().set('dressName', dressName);\r\n      return this.http.get<Tailor[]>(`${this.baseUrl}/by-dress-name`, { params });\r\n\r\n    }\r\n\r\n// private tailorShopsData = [\r\n// { id: 1, name: 'Tailor Shop A', category: ['Suits', 'Ethnic Suit'] ,\r\n// priceList :[\r\n// { name: 'Suits', price: 500 },\r\n// { name: 'Ethnic Suit', price: 700 }\r\n//\r\n// ]},\r\n// { id: 2, name: 'Tailor Shop B', category: ['Blouse', 'Lehenga', 'Churidar Suit'],\r\n// priceList :[\r\n// { name: 'Blouse', price: 500 },\r\n// { name: 'Kurti', price: 700 },\r\n// { name: 'Churidar Suit', price: 1200 }\r\n// ]},\r\n// { id: 3, name: 'Tailor Shop C', category: ['Blouse', 'Lehenga', 'Churidar Suit'],\r\n// priceList :[\r\n// { name: 'Blouse', price: 500 },\r\n// { name: 'Kurti', price: 700 },\r\n// { name: 'Churidar Suit', price: 1200 }\r\n// ]}\r\n// // Add other tailor shops here...\r\n// ];\r\n\r\n\r\n//   // Method to fetch tailor shops\r\n//   getTailorShops(): Observable<any[]> {\r\n//     return of(this.tailorShopsData); // Return mock data as an observable\r\n//   }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}