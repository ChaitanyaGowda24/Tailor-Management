{"ast":null,"code":"import { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/order.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/table\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/card\";\nfunction TailorDashboardComponent_th_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Order ID\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TailorDashboardComponent_td_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const order_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(order_r10.orderId);\n  }\n}\nfunction TailorDashboardComponent_th_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Customer ID\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TailorDashboardComponent_td_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const order_r11 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(order_r11.customerId);\n  }\n}\nfunction TailorDashboardComponent_th_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Status\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    \"status-completed\": a0,\n    \"status-pending\": a1,\n    \"status-rejected\": a2,\n    \"status-in-progress\": a3\n  };\n};\nfunction TailorDashboardComponent_td_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19)(1, \"span\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const order_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(2, _c0, order_r12.status === \"COMPLETED\", order_r12.status === \"PENDING\", order_r12.status === \"REJECTED\", order_r12.status === \"IN_PROGRESS\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", order_r12.status, \" \");\n  }\n}\nfunction TailorDashboardComponent_th_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Delivery Date\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TailorDashboardComponent_td_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const order_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, order_r13.deliveryDate));\n  }\n}\nfunction TailorDashboardComponent_tr_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 21);\n  }\n}\nfunction TailorDashboardComponent_tr_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 22);\n  }\n}\nconst _c1 = function () {\n  return [\"orderId\", \"customerId\", \"status\", \"deliveryDate\"];\n};\nexport class TailorDashboardComponent {\n  constructor(orderService) {\n    this.orderService = orderService;\n    // Dashboard statistics\n    this.totalOrders = 0;\n    this.completedOrders = 0;\n    this.pendingOrders = 0;\n    this.rejectedOrders = 0;\n    this.inProgressOrders = 0;\n    // Recent orders\n    this.recentOrders = [];\n    // Chart data\n    this.chartData = {\n      labels: ['Completed', 'Pending', 'Rejected', 'In Progress'],\n      datasets: [{\n        data: [0, 0, 0, 0],\n        backgroundColor: ['#4CAF50', '#FFC107', '#F44336', '#2196F3'],\n        hoverBackgroundColor: ['#45A049', '#FFB300', '#E53935', '#1E88E5']\n      }]\n    };\n    // Chart options\n    this.chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false\n    };\n  }\n  ngOnInit() {\n    const tailorId = Number(localStorage.getItem('id')); // Get tailorId from local storage\n    if (tailorId) {\n      this.fetchOrders(tailorId);\n    }\n  }\n  // Fetch orders for the logged-in tailor\n  fetchOrders(tailorId) {\n    this.orderService.getOrdersByTailorId(tailorId).subscribe(orders => {\n      this.recentOrders = orders.slice(0, 5); // Show the 5 most recent orders\n      this.calculateStatistics(orders); // Calculate dashboard statistics\n      this.updateChartData(); // Update the chart data\n      this.createChart(); // Initialize the chart\n    }, error => {\n      console.error('Failed to fetch orders:', error);\n    });\n  }\n  // Calculate dashboard statistics\n  calculateStatistics(orders) {\n    this.totalOrders = orders.length;\n    this.completedOrders = orders.filter(order => order.status === 'COMPLETED').length;\n    this.pendingOrders = orders.filter(order => order.status === 'PENDING').length;\n    this.rejectedOrders = orders.filter(order => order.status === 'REJECTED').length;\n    this.inProgressOrders = orders.filter(order => order.status === 'IN_PROGRESS').length;\n  }\n  // Update the chart data\n  updateChartData() {\n    this.chartData.datasets[0].data = [this.completedOrders, this.pendingOrders, this.rejectedOrders, this.inProgressOrders];\n  }\n  // Function to create the chart\n  createChart() {\n    const ctx = document.getElementById('ordersChart');\n    new Chart(ctx, {\n      type: 'doughnut',\n      data: this.chartData,\n      options: this.chartOptions\n    });\n  }\n  static {\n    this.ɵfac = function TailorDashboardComponent_Factory(t) {\n      return new (t || TailorDashboardComponent)(i0.ɵɵdirectiveInject(i1.OrderService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TailorDashboardComponent,\n      selectors: [[\"app-tailor-dashboard\"]],\n      decls: 60,\n      vars: 10,\n      consts: [[1, \"dashboard-container\"], [1, \"quick-stats\"], [1, \"stat-card\"], [1, \"chart-section\"], [\"id\", \"ordersChart\"], [1, \"recent-orders\"], [\"mat-table\", \"\", 1, \"mat-elevation-z8\", 3, \"dataSource\"], [\"matColumnDef\", \"orderId\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"customerId\"], [\"matColumnDef\", \"status\"], [\"matColumnDef\", \"deliveryDate\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [1, \"quick-actions\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"], [\"mat-raised-button\", \"\", \"color\", \"accent\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [3, \"ngClass\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n      template: function TailorDashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Tailor Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"mat-card\", 2)(5, \"mat-card-title\");\n          i0.ɵɵtext(6, \"Total Orders\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"mat-card-content\");\n          i0.ɵɵtext(8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"mat-card\", 2)(10, \"mat-card-title\");\n          i0.ɵɵtext(11, \"Completed Orders\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"mat-card-content\");\n          i0.ɵɵtext(13);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"mat-card\", 2)(15, \"mat-card-title\");\n          i0.ɵɵtext(16, \"Pending Orders\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"mat-card-content\");\n          i0.ɵɵtext(18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"mat-card\", 2)(20, \"mat-card-title\");\n          i0.ɵɵtext(21, \"Rejected Orders\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"mat-card-content\");\n          i0.ɵɵtext(23);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(24, \"mat-card\", 2)(25, \"mat-card-title\");\n          i0.ɵɵtext(26, \"In Progress Orders\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(27, \"mat-card-content\");\n          i0.ɵɵtext(28);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(29, \"div\", 3)(30, \"mat-card\")(31, \"mat-card-title\");\n          i0.ɵɵtext(32, \"Orders Overview\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"mat-card-content\");\n          i0.ɵɵelement(34, \"canvas\", 4);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(35, \"div\", 5)(36, \"mat-card\")(37, \"mat-card-title\");\n          i0.ɵɵtext(38, \"Recent Orders\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(39, \"mat-card-content\")(40, \"table\", 6);\n          i0.ɵɵelementContainerStart(41, 7);\n          i0.ɵɵtemplate(42, TailorDashboardComponent_th_42_Template, 2, 0, \"th\", 8);\n          i0.ɵɵtemplate(43, TailorDashboardComponent_td_43_Template, 2, 1, \"td\", 9);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementContainerStart(44, 10);\n          i0.ɵɵtemplate(45, TailorDashboardComponent_th_45_Template, 2, 0, \"th\", 8);\n          i0.ɵɵtemplate(46, TailorDashboardComponent_td_46_Template, 2, 1, \"td\", 9);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementContainerStart(47, 11);\n          i0.ɵɵtemplate(48, TailorDashboardComponent_th_48_Template, 2, 0, \"th\", 8);\n          i0.ɵɵtemplate(49, TailorDashboardComponent_td_49_Template, 3, 7, \"td\", 9);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementContainerStart(50, 12);\n          i0.ɵɵtemplate(51, TailorDashboardComponent_th_51_Template, 2, 0, \"th\", 8);\n          i0.ɵɵtemplate(52, TailorDashboardComponent_td_52_Template, 3, 3, \"td\", 9);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵtemplate(53, TailorDashboardComponent_tr_53_Template, 1, 0, \"tr\", 13);\n          i0.ɵɵtemplate(54, TailorDashboardComponent_tr_54_Template, 1, 0, \"tr\", 14);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(55, \"div\", 15)(56, \"button\", 16);\n          i0.ɵɵtext(57, \"Create New Order\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(58, \"button\", 17);\n          i0.ɵɵtext(59, \"View All Orders\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate(ctx.totalOrders);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.completedOrders);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.pendingOrders);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.rejectedOrders);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.inProgressOrders);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"dataSource\", ctx.recentOrders);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"matHeaderRowDef\", i0.ɵɵpureFunction0(8, _c1));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"matRowDefColumns\", i0.ɵɵpureFunction0(9, _c1));\n        }\n      },\n      dependencies: [i2.NgClass, i3.MatTable, i3.MatHeaderCellDef, i3.MatHeaderRowDef, i3.MatColumnDef, i3.MatCellDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow, i4.MatButton, i5.MatCard, i5.MatCardContent, i5.MatCardTitle, i2.DatePipe],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\r\\n  padding: 20px;\\r\\n}\\r\\n\\r\\n.quick-stats[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  gap: 16px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\n.stat-card[_ngcontent-%COMP%] {\\r\\n  flex: 1;\\r\\n  text-align: center;\\r\\n  background-color: #f5f5f5;\\r\\n}\\r\\n\\r\\n.chart-section[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\n.recent-orders[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\ntable[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.status-completed[_ngcontent-%COMP%] {\\r\\n  color: #4CAF50;\\r\\n}\\r\\n\\r\\n.status-pending[_ngcontent-%COMP%] {\\r\\n  color: #FFC107;\\r\\n}\\r\\n\\r\\n.status-rejected[_ngcontent-%COMP%] {\\r\\n  color: #F44336;\\r\\n}\\r\\n\\r\\n.quick-actions[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  gap: 16px;\\r\\n  margin-top: 20px;\\r\\n}\\r\\n\\r\\n.chart-section[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\n\\r\\n#ordersChart[_ngcontent-%COMP%] {\\r\\n  height: 300px; \\r\\n  width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvdGFpbG9yLWRhc2hib2FyZC90YWlsb3ItZGFzaGJvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztFQUNULG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLE9BQU87RUFDUCxrQkFBa0I7RUFDbEIseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7RUFDVCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUEsbUNBQW1DO0FBQ25DO0VBQ0UsYUFBYSxFQUFFLGdDQUFnQztFQUMvQyxXQUFXO0FBQ2IiLCJzb3VyY2VzQ29udGVudCI6WyIuZGFzaGJvYXJkLWNvbnRhaW5lciB7XHJcbiAgcGFkZGluZzogMjBweDtcclxufVxyXG5cclxuLnF1aWNrLXN0YXRzIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGdhcDogMTZweDtcclxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG59XHJcblxyXG4uc3RhdC1jYXJkIHtcclxuICBmbGV4OiAxO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xyXG59XHJcblxyXG4uY2hhcnQtc2VjdGlvbiB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxufVxyXG5cclxuLnJlY2VudC1vcmRlcnMge1xyXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLnN0YXR1cy1jb21wbGV0ZWQge1xyXG4gIGNvbG9yOiAjNENBRjUwO1xyXG59XHJcblxyXG4uc3RhdHVzLXBlbmRpbmcge1xyXG4gIGNvbG9yOiAjRkZDMTA3O1xyXG59XHJcblxyXG4uc3RhdHVzLXJlamVjdGVkIHtcclxuICBjb2xvcjogI0Y0NDMzNjtcclxufVxyXG5cclxuLnF1aWNrLWFjdGlvbnMge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZ2FwOiAxNnB4O1xyXG4gIG1hcmdpbi10b3A6IDIwcHg7XHJcbn1cclxuXHJcbi5jaGFydC1zZWN0aW9uIHtcclxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG59XHJcblxyXG4vKiBFbnN1cmUgdGhlIGNhbnZhcyBoYXMgYSBoZWlnaHQgKi9cclxuI29yZGVyc0NoYXJ0IHtcclxuICBoZWlnaHQ6IDMwMHB4OyAvKiBBZGp1c3QgdGhlIGhlaWdodCBhcyBuZWVkZWQgKi9cclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,KAAK,QAAQ,UAAU;;;;;;;;;ICgDpBC,8BAAsC;IAAAA,wBAAQ;IAAAA,iBAAK;;;;;IACnDA,8BAAqC;IAAAA,YAAmB;IAAAA,iBAAK;;;;IAAxBA,eAAmB;IAAnBA,uCAAmB;;;;;IAKxDA,8BAAsC;IAAAA,2BAAW;IAAAA,iBAAK;;;;;IACtDA,8BAAqC;IAAAA,YAAsB;IAAAA,iBAAK;;;;IAA3BA,eAAsB;IAAtBA,0CAAsB;;;;;IAK3DA,8BAAsC;IAAAA,sBAAM;IAAAA,iBAAK;;;;;;;;;;;;;IACjDA,8BAAqC;IAOjCA,YACF;IAAAA,iBAAO;;;;IAPDA,eAKJ;IALIA,2LAKJ;IACAA,eACF;IADEA,iDACF;;;;;IAMFA,8BAAsC;IAAAA,6BAAa;IAAAA,iBAAK;;;;;IACxDA,8BAAqC;IAAAA,YAA+B;;IAAAA,iBAAK;;;;IAApCA,eAA+B;IAA/BA,kEAA+B;;;;;IAGtEA,yBAA+F;;;;;IAC/FA,yBAAoG;;;;;;ADvE9G,OAAM,MAAOC,wBAAwB;EA6BnCC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IA5BhC;IACA,gBAAW,GAAG,CAAC;IACf,oBAAe,GAAG,CAAC;IACnB,kBAAa,GAAG,CAAC;IACjB,mBAAc,GAAG,CAAC;IAClB,qBAAgB,GAAG,CAAC;IAEpB;IACA,iBAAY,GAAY,EAAE;IAE1B;IACA,cAAS,GAAG;MACVC,MAAM,EAAE,CAAC,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,CAAC;MAC3DC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAClBC,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAC7DC,oBAAoB,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;OAClE;KAEJ;IAED;IACA,iBAAY,GAAG;MACbC,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE;KACtB;EAEgD;EAEjDC,QAAQ;IACN,MAAMC,QAAQ,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrD,IAAIH,QAAQ,EAAE;MACZ,IAAI,CAACI,WAAW,CAACJ,QAAQ,CAAC;;EAE9B;EAEA;EACAI,WAAW,CAACJ,QAAgB;IAC1B,IAAI,CAACT,YAAY,CAACc,mBAAmB,CAACL,QAAQ,CAAC,CAACM,SAAS,CACtDC,MAAe,IAAI;MAClB,IAAI,CAACC,YAAY,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACxC,IAAI,CAACC,mBAAmB,CAACH,MAAM,CAAC,CAAC,CAAC;MAClC,IAAI,CAACI,eAAe,EAAE,CAAC,CAAC;MACxB,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC;IACtB,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CACF;EACH;EAEA;EACAH,mBAAmB,CAACH,MAAe;IACjC,IAAI,CAACQ,WAAW,GAAGR,MAAM,CAACS,MAAM;IAChC,IAAI,CAACC,eAAe,GAAGV,MAAM,CAACW,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,KAAK,WAAW,CAAC,CAACJ,MAAM;IACpF,IAAI,CAACK,aAAa,GAAGd,MAAM,CAACW,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,KAAK,SAAS,CAAC,CAACJ,MAAM;IAChF,IAAI,CAACM,cAAc,GAAGf,MAAM,CAACW,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,KAAK,UAAU,CAAC,CAACJ,MAAM;IAClF,IAAI,CAACO,gBAAgB,GAAGhB,MAAM,CAACW,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,KAAK,aAAa,CAAC,CAACJ,MAAM;EACzF;EAEA;EACAL,eAAe;IACb,IAAI,CAACa,SAAS,CAAC/B,QAAQ,CAAC,CAAC,CAAC,CAACC,IAAI,GAAG,CAChC,IAAI,CAACuB,eAAe,EACpB,IAAI,CAACI,aAAa,EAClB,IAAI,CAACC,cAAc,EACnB,IAAI,CAACC,gBAAgB,CACtB;EACH;EAEA;EACAX,WAAW;IACT,MAAMa,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAsB;IACvE,IAAIxC,KAAK,CAACsC,GAAG,EAAE;MACbG,IAAI,EAAE,UAAU;MAChBlC,IAAI,EAAE,IAAI,CAAC8B,SAAS;MACpBK,OAAO,EAAE,IAAI,CAACC;KACf,CAAC;EACJ;;;uBAhFWzC,wBAAwB;IAAA;EAAA;;;YAAxBA,wBAAwB;MAAA0C;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UCVrC/C,8BAAiC;UAC3BA,gCAAgB;UAAAA,iBAAK;UAGzBA,8BAAyB;UAELA,4BAAY;UAAAA,iBAAiB;UAC7CA,wCAAkB;UAAAA,YAAiB;UAAAA,iBAAmB;UAGxDA,mCAA4B;UACVA,iCAAgB;UAAAA,iBAAiB;UACjDA,yCAAkB;UAAAA,aAAqB;UAAAA,iBAAmB;UAG5DA,oCAA4B;UACVA,+BAAc;UAAAA,iBAAiB;UAC/CA,yCAAkB;UAAAA,aAAmB;UAAAA,iBAAmB;UAG1DA,oCAA4B;UACVA,gCAAe;UAAAA,iBAAiB;UAChDA,yCAAkB;UAAAA,aAAoB;UAAAA,iBAAmB;UAG3DA,oCAA4B;UACVA,mCAAkB;UAAAA,iBAAiB;UACnDA,yCAAkB;UAAAA,aAAsB;UAAAA,iBAAmB;UAK/DA,+BAA2B;UAEPA,gCAAe;UAAAA,iBAAiB;UAChDA,yCAAkB;UAChBA,6BAAkC;UACpCA,iBAAmB;UAKvBA,+BAA2B;UAEPA,8BAAa;UAAAA,iBAAiB;UAC9CA,yCAAkB;UAGdA,iCAAqC;UACnCA,yEAAmD;UACnDA,yEAA6D;UAC/DA,0BAAe;UAGfA,kCAAwC;UACtCA,yEAAsD;UACtDA,yEAAgE;UAClEA,0BAAe;UAGfA,kCAAoC;UAClCA,yEAAiD;UACjDA,yEASK;UACPA,0BAAe;UAGfA,kCAA0C;UACxCA,yEAAwD;UACxDA,yEAAyE;UAC3EA,0BAAe;UAEfA,0EAA+F;UAC/FA,0EAAoG;UACtGA,iBAAQ;UAMdA,gCAA2B;UACiBA,iCAAgB;UAAAA,iBAAS;UACnEA,mCAAyC;UAAAA,gCAAe;UAAAA,iBAAS;;;UAnF7CA,eAAiB;UAAjBA,qCAAiB;UAKjBA,eAAqB;UAArBA,yCAAqB;UAKrBA,eAAmB;UAAnBA,uCAAmB;UAKnBA,eAAoB;UAApBA,wCAAoB;UAKpBA,eAAsB;UAAtBA,0CAAsB;UAmBrBA,gBAA2B;UAA3BA,6CAA2B;UAkCtBA,gBAAoE;UAApEA,4DAAoE;UACvDA,eAA4D;UAA5DA,6DAA4D","names":["Chart","i0","TailorDashboardComponent","constructor","orderService","labels","datasets","data","backgroundColor","hoverBackgroundColor","responsive","maintainAspectRatio","ngOnInit","tailorId","Number","localStorage","getItem","fetchOrders","getOrdersByTailorId","subscribe","orders","recentOrders","slice","calculateStatistics","updateChartData","createChart","error","console","totalOrders","length","completedOrders","filter","order","status","pendingOrders","rejectedOrders","inProgressOrders","chartData","ctx","document","getElementById","type","options","chartOptions","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["F:\\CAPSTONE\\CAPSTONE-TEMP\\tailor-management\\src\\app\\pages\\tailor-dashboard\\tailor-dashboard.component.ts","F:\\CAPSTONE\\CAPSTONE-TEMP\\tailor-management\\src\\app\\pages\\tailor-dashboard\\tailor-dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Chart } from 'chart.js';\r\nimport { OrderService } from '../../services/order.service'; // Import the OrderService\r\nimport { Order } from '../../models/order.model'; // Import the Order model\r\n\r\n@Component({\r\n  selector: 'app-tailor-dashboard',\r\n  templateUrl: './tailor-dashboard.component.html',\r\n  styleUrls: ['./tailor-dashboard.component.css'],\r\n})\r\nexport class TailorDashboardComponent implements OnInit {\r\n  // Dashboard statistics\r\n  totalOrders = 0;\r\n  completedOrders = 0;\r\n  pendingOrders = 0;\r\n  rejectedOrders = 0;\r\n  inProgressOrders = 0;\r\n\r\n  // Recent orders\r\n  recentOrders: Order[] = [];\r\n\r\n  // Chart data\r\n  chartData = {\r\n    labels: ['Completed', 'Pending', 'Rejected', 'In Progress'],\r\n    datasets: [\r\n      {\r\n        data: [0, 0, 0, 0], // Initialize with zeros\r\n        backgroundColor: ['#4CAF50', '#FFC107', '#F44336', '#2196F3'],\r\n        hoverBackgroundColor: ['#45A049', '#FFB300', '#E53935', '#1E88E5'],\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart options\r\n  chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  };\r\n\r\n  constructor(private orderService: OrderService) {}\r\n\r\n  ngOnInit(): void {\r\n    const tailorId = Number(localStorage.getItem('id')); // Get tailorId from local storage\r\n    if (tailorId) {\r\n      this.fetchOrders(tailorId);\r\n    }\r\n  }\r\n\r\n  // Fetch orders for the logged-in tailor\r\n  fetchOrders(tailorId: number): void {\r\n    this.orderService.getOrdersByTailorId(tailorId).subscribe(\r\n      (orders: Order[]) => {\r\n        this.recentOrders = orders.slice(0, 5); // Show the 5 most recent orders\r\n        this.calculateStatistics(orders); // Calculate dashboard statistics\r\n        this.updateChartData(); // Update the chart data\r\n        this.createChart(); // Initialize the chart\r\n      },\r\n      (error) => {\r\n        console.error('Failed to fetch orders:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Calculate dashboard statistics\r\n  calculateStatistics(orders: Order[]): void {\r\n    this.totalOrders = orders.length;\r\n    this.completedOrders = orders.filter((order) => order.status === 'COMPLETED').length;\r\n    this.pendingOrders = orders.filter((order) => order.status === 'PENDING').length;\r\n    this.rejectedOrders = orders.filter((order) => order.status === 'REJECTED').length;\r\n    this.inProgressOrders = orders.filter((order) => order.status === 'IN_PROGRESS').length;\r\n  }\r\n\r\n  // Update the chart data\r\n  updateChartData(): void {\r\n    this.chartData.datasets[0].data = [\r\n      this.completedOrders,\r\n      this.pendingOrders,\r\n      this.rejectedOrders,\r\n      this.inProgressOrders,\r\n    ];\r\n  }\r\n\r\n  // Function to create the chart\r\n  createChart(): void {\r\n    const ctx = document.getElementById('ordersChart') as HTMLCanvasElement;\r\n    new Chart(ctx, {\r\n      type: 'doughnut',\r\n      data: this.chartData,\r\n      options: this.chartOptions,\r\n    });\r\n  }\r\n}\r\n","<div class=\"dashboard-container\">\r\n  <h2>Tailor Dashboard</h2>\r\n\r\n  <!-- Quick Stats -->\r\n  <div class=\"quick-stats\">\r\n    <mat-card class=\"stat-card\">\r\n      <mat-card-title>Total Orders</mat-card-title>\r\n      <mat-card-content>{{ totalOrders }}</mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"stat-card\">\r\n      <mat-card-title>Completed Orders</mat-card-title>\r\n      <mat-card-content>{{ completedOrders }}</mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"stat-card\">\r\n      <mat-card-title>Pending Orders</mat-card-title>\r\n      <mat-card-content>{{ pendingOrders }}</mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"stat-card\">\r\n      <mat-card-title>Rejected Orders</mat-card-title>\r\n      <mat-card-content>{{ rejectedOrders }}</mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"stat-card\">\r\n      <mat-card-title>In Progress Orders</mat-card-title>\r\n      <mat-card-content>{{ inProgressOrders }}</mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <!-- Orders Overview Chart -->\r\n  <div class=\"chart-section\">\r\n    <mat-card>\r\n      <mat-card-title>Orders Overview</mat-card-title>\r\n      <mat-card-content>\r\n        <canvas id=\"ordersChart\"></canvas>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <!-- Recent Orders -->\r\n  <div class=\"recent-orders\">\r\n    <mat-card>\r\n      <mat-card-title>Recent Orders</mat-card-title>\r\n      <mat-card-content>\r\n        <table mat-table [dataSource]=\"recentOrders\" class=\"mat-elevation-z8\">\r\n          <!-- Order ID Column -->\r\n          <ng-container matColumnDef=\"orderId\">\r\n            <th mat-header-cell *matHeaderCellDef>Order ID</th>\r\n            <td mat-cell *matCellDef=\"let order\">{{ order.orderId }}</td>\r\n          </ng-container>\r\n\r\n          <!-- Customer ID Column -->\r\n          <ng-container matColumnDef=\"customerId\">\r\n            <th mat-header-cell *matHeaderCellDef>Customer ID</th>\r\n            <td mat-cell *matCellDef=\"let order\">{{ order.customerId }}</td>\r\n          </ng-container>\r\n\r\n          <!-- Status Column -->\r\n          <ng-container matColumnDef=\"status\">\r\n            <th mat-header-cell *matHeaderCellDef>Status</th>\r\n            <td mat-cell *matCellDef=\"let order\">\r\n              <span [ngClass]=\"{\r\n                'status-completed': order.status === 'COMPLETED',\r\n                'status-pending': order.status === 'PENDING',\r\n                'status-rejected': order.status === 'REJECTED',\r\n                'status-in-progress': order.status === 'IN_PROGRESS'\r\n              }\">\r\n                {{ order.status }}\r\n              </span>\r\n            </td>\r\n          </ng-container>\r\n\r\n          <!-- Delivery Date Column -->\r\n          <ng-container matColumnDef=\"deliveryDate\">\r\n            <th mat-header-cell *matHeaderCellDef>Delivery Date</th>\r\n            <td mat-cell *matCellDef=\"let order\">{{ order.deliveryDate | date }}</td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"['orderId', 'customerId', 'status', 'deliveryDate']\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: ['orderId', 'customerId', 'status', 'deliveryDate']\"></tr>\r\n        </table>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <!-- Quick Actions -->\r\n  <div class=\"quick-actions\">\r\n    <button mat-raised-button color=\"primary\">Create New Order</button>\r\n    <button mat-raised-button color=\"accent\">View All Orders</button>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}